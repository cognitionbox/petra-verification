<dot> ::= .;
<space> := \s;
<newline> := \n;
<opencurley> := {;
<closedcurley> := };
<opencurved> := (;
<closedcurved> := );
<openangled> := <;
<closedangled> := >;
<openclosedcurved> := <opencurved> <closedcurved>;
<semicolon> := ;;
<comma> := ,;
<xor> := ^;
<and> := &&;
<or> := ||;
<arrow> := ->;
<new> := new;
<ret> := return;
<extends> := extends;
<public> := public;
<class> := class;
<void> := void;
<implements> := implements;
<kasekeyword> := kase;
<kaseskeyword> := kases;
<forallkeyword> := forall;
<accept> := accept;
<join> := join;
<seq> := seq;
<seqr> := seqr;
<par> := par;
<parr> := parr;
<boolean> := boolean;
<consumer> := Consumer;
<pboolean> := PBoolean;
<pinteger> := PInteger;
<pcollection> := PCollection;
<list> := List;

<condition> := <gettermethodcallchain> <dot> <booleanmethodcall>;
<disjuncts> := <condition> | <condition> <xor> <disjuncts>;
<conjuncts> := <condition> | <condition> <and> <conjuncts>;
<kaseconditionlamda> := <var> <arrow> <disjuncts> | <var> <arrow> <conjuncts>;
<name> := asd;
<gettermethodcall> := <name> <openclosedcurved>;
<booleanmethodcall> := <name> <openclosedcurved>;
<gettermethodcallchain> := <gettermethodcall> | <gettermethodcall> <dot> <gettermethodcallchain>;
<propositionname> := <name>;
<singletonfieldname> := asd;
<collectionfieldname> := asd;
<camelcasename> := asd;
<stepname> := <camelcasename>;
<refdatatypename> := <camelcasename>;
<primativedatatypename> := <pboolean>  | <pinteger> ;
<viewname> := <camelcasename>;
<stepuse> := <seqstepuse> <semicolon> | <joinuse> <semicolon>;
<var> := asd;
<vardeclaration> := <refdatatypename> <space> <name>;
<graphdef> := <public> <space> <class> <space> <stepname> <space> <extends> <space> <consumer> <openangled> <refdatatypename> <closedangled> <space> <implements> <space> <viewname> <space> <opencurley> <newline> <public> <space> <void> <space> <accept> <opencurved> <vardeclaration> <closedcurved> <opencurley> <newline> <kaseskeyword> <opencurved> <var> <comma> <newline> <kases> <closedcurved> <closedcurley>;
<stepslambda> := <var> <arrow> <opencurley> <newline> <stepuses> <closedcurley>;
<kase> := <kasekeyword> <opencurved> <kaseconditionlamda> <comma> <kaseconditionlamda> <comma> <newline> <stepslambda> <closedcurved>;
<kases> := <kase> | <kase> <comma> <newline> <kases>;
<stepconstructorcall> := <new> <space> <stepname> <openclosedcurved>;
<seqsingletonstepuse> := <seq> <opencurved> <singletonfieldname> <comma> <stepconstructorcall> <closedcurved>;
<seqcollectionstepuse> := <seqr> <opencurved> <singletonfieldname> <comma> <collectionfieldname> <comma> <stepconstructorcall> <closedcurved>;
<parsingletonstepuse> := <par> <opencurved> <singletonfieldname> <comma> <stepconstructorcall> <closedcurved>;
<parcollectionstepuse> := <parr> <opencurved> <singletonfieldname> <comma> <collectionfieldname> <comma> <stepconstructorcall> <closedcurved>;
<castsingletonstepuse> := <seq> <opencurved> <singletonfieldname> <comma> <kaseconditionlamda> <comma> <kaseconditionlamda> <closedcurved>;
<castcollectionstepuse> := <seqr> <opencurved> <singletonfieldname> <comma> <kaseconditionlamda> <comma> <kaseconditionlamda> <closedcurved>;
<parstepuse> := <parsingletonstepuse> | <parcollectionstepuse>;
<seqstepuse> := <seqsingletonstepuse> | <seqcollectionstepuse> | <castsingletonstepuse> | <castcollectionstepuse>;
<stepuses> := <stepuse> | <stepuse> <newline> <stepuses>;
<joinuse> := <join> <opencurved> <parstepuses> <closedcurved>;
<parstepuses> := <parstepuse> | <parstepuse> <comma> <parstepuses>;

<viewnames> := <viewname> | <viewname> <comma> <viewnames>;
<refdatatypedef> := <refdatatypename> <space> <implements> <space> <viewnames> <space> <opencurley> <newline> <reffields> };
<reffields> := <refsingletonfields> | <refcollectionfields> | <refsingletonfields> <newline> <refcollectionfields>;
<refviewdef> := <viewname> <space> <opencurley> <newline> <reffields> <newline> <propositionmethods> <closedcurley>;
<refsingletonfields> := <refsingletonfield> | <refsingletonfield> <newline> <refsingletonfields>;
<refcollectionfields> := <refcollectionfield> | <refcollectionfield> <newline> <refcollectionfields>;
<refsingletonfield> := <refdatatypename> <space> <singletonfieldname> <semicolon>;
<refcollectionfield> := <pcollection> <openangled> <refdatatypename> <closedangled> <space> <singletonfieldname> <semicolon>;
<propositionmethods> := <propositionmethod> | <propositionmethod> <newline> <propositionmethods>;
<propositionmethod> := <boolean> <space> <name> <openclosedcurved> <opencurley> <ret> <space> <proposition> <semicolon> <closedcurley>;
<proposition> := <singletonfieldname> <dot> <propositionname> <openclosedcurved> | <forallkeyword> <opencurved> <collectionfieldname> <comma> <disjuncts> <closedcurved> | <proposition> <and> <proposition> | <proposition> <or> <proposition> | <proposition> <xor> <proposition>;

<primativedatatypedef> := <refdatatypename> <space> <implements> <space> <viewnames> <space> <opencurley> <newline> <primativefields> <closedcurley>;
<primativefields> := <primativesingletonfields> | <primativelistfields> | <primativesingletonfields> <newline> <primativelistfields>;
<primativeviewdef> := <viewname> <space> <opencurley> <newline> <primativefields> <newline> <predicatemethods> <closedcurley>;
<primativesingletonfields> := <primativesingletonfield> | <primativesingletonfield> <newline> <primativesingletonfields>;
<primativelistfields> := <primativelistfield> | <primativelistfield> <newline> <primativelistfields>;
<primativesingletonfield> := <primativedatatypename> <space> <singletonfieldname> <semicolon>;
<primativelistfield> := <list> <openangled> <primativedatatypename> <closedangled> <space> <singletonfieldname> <semicolon>;
<predicatemethods> := <predicatemethod> | <predicatemethod> <newline> <predicatemethods>;
<predicatemethod> := <boolean> <space> <name> <openclosedcurved> <opencurley> <ret> <space> <predicate> <semicolon> <closedcurley>;
<predicate> := pred;